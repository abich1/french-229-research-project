axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si()) # Use some pretty colors
data <- read_excel("Book1.xlsx")
state_shape <- map_data('state')
# Load built-in state names and abbreviations
state_abbrevs <- data.frame(state.abb, state.name)
#Join `incarceration_data` and  `state_abbrevs`
data <- left_join(data, state_abbrevs, by=c('State' = 'state.name'))
# Add a new column to the `incarceration_data` dataframe called "region" that includes a lowercase version of the state name
data <- data %>%
mutate("region" = tolower(State))
#Join `state_shape` and `incarceration_data`
state_shape <- left_join(state_shape, data, by='region')
state_shape$Oceania <- as.numeric(state_shape$Oceania)
# Create map of Black jail populations by state
ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Oceania)) +
coord_map() +
labs(title = "Black Jail Populations across the United States in 2018", fill = "Number of Black People in Jail") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si()) # Use some pretty colors
my_plotly <- ggplotly(my_plot) %>%
config(displayModeBar = FALSE)
# Create map of Black jail populations by state
my_plot <- ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Oceania)) +
coord_map() +
labs(title = "Black Jail Populations across the United States in 2018", fill = "Number of Black People in Jail") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si()) # Use some pretty colors
my_plotly <- ggplotly(my_plot) %>%
config(displayModeBar = FALSE)
return(my_plotly)
my_plotly <- ggplotly(my_plot) %>%
config(displayModeBar = FALSE)
my_plotly
runApp()
#Join `state_shape` and `incarceration_data`
state_shape <- left_join(state_shape, data, by='region')
runApp()
state_shape$Oceania <- as.numeric(state_shape$Oceania)
runApp()
runApp()
runApp()
# Make a line chart of the number of user selected data over time
# Allow the user to select the category
my_plot <- ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = get(input$user_category))) +
coord_map() +
labs(title = custom_titles[[input$user_category]], fill = "Number of people") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si())
my_plot <- ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = get(input$user_category))) +
coord_map() +
labs(title = custom_titles[[input$user_category]], fill = "Number of people") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si())
# Make a line chart of the number of user selected data over time
# Allow the user to select the category
my_plot <- ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = get(input$user_category))) +
coord_map() +
labs(title = custom_titles[[input$user_category]], fill = "Number of people") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si())
# Make a line chart of the number of user selected data over time
# Allow the user to select the category
my_plot <- ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = get(input$user_category))) +
coord_map() +
labs(title = custom_titles[[input$user_category]], fill = "Number of people") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si())
my_plot <- ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = get(input$user_category))) +
coord_map() +
labs(title = custom_titles[[input$user_category]], fill = "Number of people") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si())
runApp()
runApp()
# Make a line chart of the number of user selected data over time
# Allow the user to select the category
my_plot <- ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = get(input$user_category))) +
coord_map() +
labs(title = custom_titles[[input$user_category]], fill = "Number of people") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
axis.title = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si())
runApp()
runApp()
runApp()
my_plot <- ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Oceania)) +
coord_map() +
labs(title = "Black Jail Populations across the United States in 2018", fill = "Number of Black People in Jail") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si())
shiny::runApp()
data <- read_excel("Book1.xlsx")
state_shape <- map_data('state')
# Load built-in state names and abbreviations
state_abbrevs <- data.frame(state.abb, state.name)
#Join `incarceration_data` and  `state_abbrevs`
data <- left_join(data, state_abbrevs, by=c('State' = 'state.name'))
# Add a new column to the `incarceration_data` dataframe called "region" that includes a lowercase version of the state name
data <- data %>%
mutate("region" = tolower(State))
#Join `state_shape` and `incarceration_data`
state_shape <- left_join(state_shape, data, by='region')
state_shape$`Foreign born` <- as.numeric(state_shape$`Foreign born`)
state_shape$Oceania <- as.numeric(state_shape$Oceania)
state_shape$Oceania <- as.numeric(state_shape$Oceania)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(state_abbrevs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Create map of Black jail populations by state
my_plot <- ggplot(state_shape) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Oceania)) +
coord_map() +
labs(title = "Black Jail Populations across the United States in 2018", fill = "Number of Black People in Jail") +
theme(
axis.line = element_blank(), # Remove grid background and lat and long
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()) +
scale_fill_continuous(low = 'pink', high ='blue', labels = scales::label_number_si()) # Use some pretty colors
my_plotly <- ggplotly(my_plot) %>%
config(displayModeBar = FALSE)
my_plotly
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(usmap)
install.packages("usmap")
usa <- map_data("usa")
View(usa)
plot_usmap(regions = "states")
# install.packages("usmap")
library(usmap)
usa <- map_data("usa")
plot_usmap(regions = "states")
data <- read_excel("Book1.xlsx")
plot_usmap(data = data)
plot_usmap(data = get(input$user_category))
runApp()
runApp()
runApp()
plot_usmap(data = (user_category), fil = get(input$user_category), color = orange, labels=TRUE) +
scale_fill_continuous( low = "white", high = orange,
name = "Popularity", label = scales::comma
) +
theme(legend.position = "right") +
theme(panel.background = element_rect(colour = "black")) +
labs(title = "US East Coast Popularity of Thanksgiving Google Search", caption = "Source: @littlemissdata")
runApp()
runApp()
data1 <- plot_usmap(regions = "states")
data1 <- plot_usmap(regions = "states")
View(data1)
cities_t <- usmap_transform(data)
install.packages("rgdal")
library(rgdal)
cities_t <- usmap_transform(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
data <- data %>%
filter(year >= input$year[1] & year <= input$year[2]) %>%
rename(value = input$user_category)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- data %>%
filter(year >= 1990 & year <= 2018)
data <- data %>%
filter(Year >= 1990 & Year <= 2018)
View(data)
data2 <- read_excel(Book2)
data2 <- read_excel(Book2.xlsx)
data2 <- read_excel("Book2.xlsx")
View(data2)
data2 <- read_excel("Book2.xlsx")
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
data2 <- read_excel("Book2")
data2 <- read_excel("Book2.xlsx")
data2 <- read_excel("Book2.xlsx")
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = year, y = Washington, group = group)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
my_plotly_plot2
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Washington, group = group)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Washington)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
return(my_plotly_plot2)
my_plotly_plot2
my_plotly_plot2
shiny::runApp()
library(colourpicker)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(colourpicker)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("searchInput")
runApp()
View(data2)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# Make a scatter plot of oil per capita over time by country
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = year, y = value, group = group)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
runApp()
my_plot <- ggplot(data = co2_data_us) +
geom_line(mapping = aes(x = year, y = value, group = 1, text = paste0('Year: ', year, '\n', 'CO2 Emission (million tonnes): ', value))) +
labs(x = "Year", y = "Annual Carbon Dioxide Emissions (million tonnes)", title = custom_titles[[input$user_category]])
my_plotly
my_plot <- ggplot(data = co2_data_us) +
geom_line(mapping = aes(x = Year, y = value, group = 1, text = paste0('Year: ', year, '\n', 'CO2 Emission (million tonnes): ', value))) +
labs(x = "Year", y = "Annual Carbon Dioxide Emissions (million tonnes)", title = custom_titles[[input$user_category]])
data2 <- read_excel("Book2.xlsx")
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Washington)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
my_plotly_plot2
runApp()
runApp()
runApp()
# Make a scatter plot of oil per capita over time by country
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Percent, group = 1)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
my_plotly_plot2
data2 <- read_excel("Book2.xlsx")
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Washington)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
my_plotly_plot2
runApp()
data2 <- read_excel("Book3.xlsx")
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Percent, color = State)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
my_plotly_plot2
# Make a scatter plot of oil per capita over time by country
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Percent, group = group, color = State)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
my_plotly_plot2
runApp()
data2 <- data2 %>%
output$yearPlot <- renderPlotly({
# Make a scatter plot of oil per capita over time by country
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Percent, group = group, color = State)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "State")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
return(my_plotly_plot2)
})
runApp()
runApp()
runApp()
runApp()
runApp()
# Make a scatter plot of oil per capita over time by country
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Percent, color = State)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "State")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
my_plotly_plot2
runApp()
runApp()
runApp()
my_plot2 <- ggplot(data2) +
geom_line(mapping = aes(x = Year, y = Percent, group = group, color = State)) +
labs(x = "Year", y = "Carbon Dioxide Emissions per Capita (tonnes per person)", title = "Carbon Dioxide Emissions from Oil per Capita", color = "Country")
# Make interactive plot
my_plotly_plot2 <- ggplotly(my_plot2) %>%
config(displayModeBar = FALSE)
my_plotly_plot2
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
